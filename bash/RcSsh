export X509_USER_CERT=${MY}/KirINFN.pem		#certificate used by globus
export X509_USER_KEY=${MY}/KirPrivate.pem	#private key for this certificate

function kk_deploy_key_pair()
{ # Check that ssh private-public is indeed a pair and deploy them to the given server
    local what_to_deploy=$1
    local private=$2
    local server=$3
    local user=$4
    local password=$5

    if [[ ${what_to_deploy} == "-h" ]]; then
	echo "Usage: $0 [public|private] priv_key_path host user password"
	return
    fi
    [[ -z ${what_to_deploy} ]] && what_to_deploy=public
    [[ -z ${private} ]] && private=${MY_DIR}/keys/kir_no_secret
    [[ -z ${server} ]] && server=localhost
    [[ -z ${user} ]] && user=localadmin
    [[ -z ${password} ]] && password=ubuntu

    local public=${private}.pub
    local fingerprint=$(ssh-keygen -lf ${private})
    local public_value=$(cat ${public})
    local private_value=$(cat ${private})
    local public_value_from_private=$(ssh-keygen -yf ${private})

    if [[ ${public_value} = ${public_value_from_private}* ]]; then
	echo "${public} -> ${fingerprint}"
	case ${what_to_deploy} in
	    private) sshpass -p ${password} scp ${private} ${user}@${server}:~/.ssh/id_rsa;;
	    public) sshpass -p ${password} ssh ${user}@${server} echo ${public_value} >> ~/.ssh/authorized_keys;;
	esac
    else
	echo "${private} and ${public} are not a match!"
    fi
}
function kkssh()
{ # manipulate with ssh keys
    echo "operations with ssh, keys, certificates"
    local ssh_command=${1:-$(_get_input 'add_kir_key erase_offending_key add_ossqe_key finger deploy_to self-signed-certificate')}
    case ${ssh_command} in
    deploy-to)
      local host=$(_get_input 'add_kir_key add_ossqe_key finger deploy_to self-signed-certificate')
      ssh-copy-id $host
    ;;
    add_kir_key)
      ssh-add ~/Google\ Drive/Kirill/Keys/KirVaio.private
      ssh-add $MY/etc/keys/kir_no_secret
    ;;
    erase_offending_key)
      read -p "enter offending key: " offending_key
      ssh-keygen -R $offending_key
    ;;
    add_ossqe_key)
      curl -s https://wwwin-gitlab-sjc.cisco.com/mercury/configs/raw/master/private.key -o OsSqeUser && chmod 400 OsSqeUser && ssh-add OsSqeUser && chmod 600 OsSqeUser && rm OsSqeUser
    ;;
    pair-cert)
	echo Operations with p12 and pem public-private pairs
        ls ${MY}/keys/* ${HOME}/.ssh/*
	local Public=$(ksGetInput 'Public  key'); [[ -z $Public ]] && return
	local Private=$(ksGetInput 'Private  key'); [[ -z $Private ]] && return

        local out1=$(openssl rsa -in ${Private} -noout -modulus)
        local out2=$(openssl x509 -in ${Public} -noout -modulus)
        echo ${Public} and ${Private}
        [ "$out1" == "$out2" ] && echo "are pair" || echo "are NOT pair"
    ;;
    finger)
      ssh-add -l -E md5
    ;;
    self-signed-certificate)
      openssl req -x509 -newkey rsa:4096 -keyout KirSelfSignedCertKey.pem -out KirSelfSignedCert.pem -days 365
    ;;
    esac
}
