export X509_USER_CERT=${MY}/KirINFN.pem		#certificate used by globus
export X509_USER_KEY=${MY}/KirPrivate.pem	#private key for this certificate
function kkpair()
{ # Check that ssh private-public is indeed a pair
    local priv=~/.ssh/kir.private
    local pub=~/.ssh/kir.public
    local pub1=$(cat ${pub})
    local pub2=$(ssh-keygen -yf ${priv})
    local match

	[[ $pub1 = $pub2* ]] && match=match || match='do not match'
	echo $priv and $pub $match
}
function kkfinger()
{ # private key fingerprint
    local priv=~/.ssh/kir.private

    local fingerprint=$(ssh-keygen -lf ${priv})
    echo $priv fingerprint $fingerprint
}
function kkremote()
{ # prepare server $1 for ssh
    local remote=${1:-aio}
    local priv=~/.ssh/kir.private

    echo prepare $remote for ssh use...
    ssh-copy-id $remote
    scp $priv $remote:.ssh/id_rsa
    ssh $remote chmod 600 .ssh/id_rsa
}
function kktunel()
{
    local proxy=$(kk_input_from_cmd 'proxy' 'proxy')
    local remote=$(ksGetInput 'final remote' 'remote')
    local loc_port=$(ksGetInput 'local port' '7777')
    local rem_port=$(ksGetInput 'remote port' '443')
    local cmd=ssh -L $loc_port:localhost:$rem_port $proxy

    echo $cmd
}
function hhtunel(){
    echo ssh -2NfL ip1:8003:ip2:5900 ip2 # How to ssh tunnel [-2 only 2 protocol] [-N don't exec cmd] [-f go background before cmd]
}
function kkssh()
{ # manipulate with ssh keys
    echo "operations with ssh, keys, certificates"
    local ssh_command=${1:-$(_get_input 'add_kir_key erase_offending_key tunnel finger deploy_to self_signed_cert')}
    case ${ssh_command} in
    deploy-to)
      kk_deploy_key_pair
    ;;
    add_kir_key)
      ssh-add ~/.ssh/kir.private
      ssh-add $MY/etc/keys/kir_no_secret
    ;;
    erase_offending_key)
      read -p "enter offending key: " offending_key
      ssh-keygen -R $offending_key
    ;;
    pair-cert)
	echo Operations with p12 and pem public-private pairs
        ls ${MY}/keys/* ${HOME}/.ssh/*
	local Public=$(ksGetInput 'Public  key'); [[ -z $Public ]] && return
	local Private=$(ksGetInput 'Private  key'); [[ -z $Private ]] && return

        local out1=$(openssl rsa -in ${Private} -noout -modulus)
        local out2=$(openssl x509 -in ${Public} -noout -modulus)
        echo ${Public} and ${Private}
        [ "$out1" == "$out2" ] && echo "are pair" || echo "are NOT pair"
    ;;
    finger) kkfinger ;;
    self_signed_cert) kkcert ;;
    tunnel) kktunnel ;;
    esac
}

function hhssh() {
    echo sshpass -p default ssh admin@172.18.6.40                                   # how to sshpass
    echo ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@ip    # how to ssh without new host questions
    echo ssh-keygen -R hostname
}

function kkcert() {
    openssl req -x509 -newkey rsa:4096 -days 365 -keyout KirSelfSignedCertKey.key -out KirSelfSignedCert.crt
}

function kkfinger() {
    ssh-add -l -E md5
}


echo $BASH_SOURCE loaded