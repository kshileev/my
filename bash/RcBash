# Login interactive shell: /etc/bash then ~/.bash_profile
# Non-log shell: execute ~/.bashrc only
# Non-interactive shell: execute script pointed by $ENV, nothing if $ENV = ""
[ -z "PS1" ] && return					#nothing to do for non interactive shell
PS1="\W> "	    #prompt: hostname:dirname>


export MY_BASH_DIR=$(cd $(dirname "${BASH_SOURCE:-$0}") && pwd)
[[ -d $HOME/miniconda3 ]] && export PATH="$HOME/miniconda3/bin:$PATH"
export MY_USER=kshileev
export MY_TMP_DIR=/tmp/${MY_USER}
export MY_VENV_DIR=${HOME}/venv
export MY_BASH_RC=${MY_BASH_DIR}/RcBash
export MY_VIM_RC=${MY_DIR}/RcVim
export SYSSCREENRC=${MY_DIR}/RcScreen
mkdir -p ${MY_TMP_DIR}
export MY_CSCOPE_DIR=${MY_TMP_DIR}/cscope		#tmp dir where cscope stores the output
export MY_CSCOPE_FILE_LIST=${MY_CSCOPE_DIR}/cscope.files	#file to list files to browse into db
export LESSHISTFILE=${MY_TMP_DIR}/LessHist
export HISTFILE=${MY_TMP_DIR}/BashHist
export HISTSIZE=5000
export HISTCONTROL=ignoreboth
export SIMPLE_BACKUP_SUFFIX=.${MY_USER}		#used by patch to store initial state of touched files
export DISTCC_HOSTS='1.1.1.1 2.2.2.2 3.3.3.3'	#used by make -j
export ARTISTIC_STYLE_OPTIONS=${MY_DIR}/RcAstyle
export LD_LIBRARY_PATH=$HOME
export ROOTGUI=native
export TZ='Europe/Moscow'

source ${MY_BASH_DIR}/RcHelpers


function kkelk()
{
    local cmd=$(_get_input 'index indexR docker')
    case ${cmd} in
        index)
            curl -XGET 'localhost:9200/_cat/indices?v&pretty'

            # curl -H "Content-Type: application/json" -XPOST 'localhost:9200/resultnfvbench-2017.10.18/_bulk?pretty&refresh' --data-binary "@resultnfvbench-2017.10.18.json"
        ;;
        indexR)
            curl -XGET 'mgm.foxberry:9200/_cat/indices?v&pretty'
        ;;
        docker)
            docker run -d -p 9200:9200 -p 9300:9300 -it -h elasticsearch --name elasticsearch docker.elastic.co/elasticsearch/elasticsearch:6.0.0
            docker run -d -p 5601:5601 -h kibana --name kibana --link elasticsearch:elasticsearch -v "$HOME":/data docker.elastic.co/kibana/kibana:6.0.0
            # docker run -d -p 9500:9500 -h logstash --name logstash --link $name:$name --rm -v "$HOME":/data logstash -f /data/repo/my/logstash.conf
        ;;
    esac
}

function kkinfo()
{   # shows usefull info about unknown command provided as argument
    local cmd_name=$1
    local cmd_full_path=`which ${cmd_name}`
    file ${cmd_full_path}
    dpkg -S ${cmd_full_path}
}
function kkrepo()
{
    local repo=$(_get_input 'os-sqe rally devstack tempest cisco-networking cisco-kloudbuster barracuda ovzctl ovzkernel')
    case ${repo} in
	rally) git clone https://git.openstack.org/openstack/rally;;
	devstack) git clone https://github.com/openstack-dev/devstack.git;;
	tempest) git clone https://github.com/openstack/tempest.git;;
	os-sqe) git clone https://github.com/CiscoSystems/os-sqe.git sqe;;
	cisco-nvfbench) git clone http://gitlab.cisco.com/openstack-perf/nfvbench.git;;
	cisco-kloudbuster) https://github.com/openstack/kloudbuster.git kloud;;
    cisco-networking) https://git.openstack.org/openstack/networking-cisco netcis;;
	ovzctl) git clone git://git.openvz.org/pub/vzctl $HOME/vz/ovzctl ;;
	ovzkernel) git clone  git://git.openvz.org/pub/linux-2.6.18-openvz $HOME/vz/18-ovz ;;
	my) git clone git@github.com:kshileev/my.git ;;
    esac
}
function kkalias()
{
    echo Defines aliases
    alias a='alias'
    alias df='df -h'
    alias du='du -h'
    alias di='docker images -a'
    alias dp='docker ps -a'
    alias dsqe='cd ~/repo/os-sqe && docker run -it --name sqe --rm -v $PWD:/os-sqe cloud-docker.cisco.com/os-sqe:3.6.5'
    alias e='echo'
    alias ee="vim ${MY_BASH_RC}"
    alias fk="find . -name \"*.${MY_USER}\""
    alias gb='git branch -vv'
    alias gc='git checkout -- . && git clean -f'
    alias gd='git diff'
    alias gf='git fetch'
    alias gl='git log'
    alias gp='git pull'
    alias gr='git remote -v'
    alias gs='git status'
    alias grc='find . -name "*.[ch]pp" -o -name "*.[ch]" | xargs grep'
    alias gdi="gendiff . .${MY_USER} > ~/${MY_USER}.diff-xx-xxxx-`date +%Y%m%d`"
    alias h='history'
    alias l='ls -F'
    alias l.='ls -dh .*'
    alias ll='ls -Flih'
    alias ll.='ls -Fldih .*'
    alias ld='ls -lad'
    alias m='less'
    alias nifed='ssh nifed'
    alias py="ipython"
    alias pss='ksShowProcess'
    alias pt="patch -p1 -b -z .${USER}"
    alias pw="ps uxwf"
    alias src=". ~/.bashrc"
    alias sslt='ps auxw |grep ssh |grep -v grep'
    alias s='ssh -o StrictHostKeyChecking=no'
    alias store='sshpass -p ubuntu ssh localadmin@store'
    alias kki="python $MY_DIR/py/cipher.py -s"
    #alias   0m64='make -j32 CC=distcc ARCH=x86_64'
    #alias   0mod="gcc -c -Wall -nostdinc -I/usr/src/linux/include"
    #alias   0RpmBld32='rpmbuild --nodeps --target=i386 --define "_sourcedir $PWD" --define "_builddir $HOME/bld"'
    #alias   0RpmBld64='rpmbuild --nodeps --target=x86_64 --define "_sourcedir $PWD" --define "_builddir $HOME/bld"'
    #alias   0RpmBld='rpmbuild --define "_sourcedir $PWD" --define "_builddir $PWD" --define "_rpmdir $HOME"'
    #alias   0vztc='echo "BASE<<4+1"; cat /var/run/vz_tc_base; cat /var/run/vz_tc_classes; tc filter show dev eth0 parent 2:'
    #alias   0vzl='vzlist -a -o ctid,hostname,ip,numproc,ostemplate'
    #alias   0vzst='vzctl set 101 --hostname changename '
#    alias   0gos='sshpass -p girl:click.bravo ssh -R 7777:localhost:22 russup@support.swsoft'
#    alias   0gred='sshpass -p 1q2w3e ssh kir@red.dragon.gdc.mirantis.sar'
#    alias   0gblu='sshpass -p 1q2w3e ssh kir@blue.dragon.gdc.mirantis.sar'
}
function kkgrep
{
    [ -z "$1" ] && echo Usage $FUNCNAME symbol || echo $1 a\is in :
    find . -name *.[ch]pp | xargs grep $1
}
function kkinit()
{
    local my_env_command=$(_get_input 'local remote update' $1)
    case ${my_env_command} in
    local)
        ksAddLineToFileIfNotThere "[ -f ${MY_BASH_RC} ] && . ${MY_BASH_RC}" ~/.bashrc
	[ -L ~/.vimrc ] || ln -s ${MY_VIM_RC} ~/.vimrc
	;;
    remote)
	grep -v ^127 /etc/hosts | grep ^[1-2]
	local Node=$(ksGetInput 'Choose node where to deploy' 'NoNode')
	echo "Deploing to ${Node}:"
	scp -p ${MY_BASH_RC} ~/.bash_profile ${MY_VIM_RC} localadmin@${Node}:
	;;
    update)
	cd ${MY_DIR}
	git pull
	;;
    esac
}
function kksystem
{ # we're running on deb based or rpm based OS?
  local deb=/etc/debian_version
  local rpm=/etc/redhat-release
  [ -f ${deb} ] && { echo -n "It's DEBIAN version: " ; cat ${deb}; return 1; }
  [ -f ${rpm} ] && { echo -n "It's RPM version: "    ; cat ${rpm}; return -1; }
}

function cat_files()
{
	local dir=$1
	local files=$2
	for f in ${files}; do
		echo -e "\n$dir/$f:"
		cat ${dir}/${f}
		echo -e "<----\tend\t----"
	done
}
function PingNodeOrExit()
{
   ping -c 1 $1 > /dev/null 2>&1
   [ "$?" == "0" ] || { echo Node \"$1\" is off, aborting...; exit 1; }
}

function kkntp
{
    echo Creating ntp config in /etc/ntp.conf
    cat > /etc/ntp.conf <<EOF
driftfile /var/lib/ntp/drift

restrict default kod nomodify notrap nopeer noquery
restrict -6 default kod nomodify notrap nopeer noquery

restrict 127.0.0.1 
restrict -6 ::1

server dn11.kirshil.ru

includefile /etc/ntp/crypto/pw

keys /etc/ntp/keys
EOF
}
function kkps()
{
    local name=$1
    local pid=$2
    ps -C ${name} -o user,pid,ppid,cmd
    [[ -n ${pid} ]] && ps -p ${pid} -o user,pid,ppid,cmd
}
function kkvenv()
{
    git status || return
    local dir="$(git rev-parse --show-toplevel)/venv"
    [ -d ${dir} ] || virtualenv ${dir}
    . ${dir}/bin/activate
    pip install -r requirements.txt
}

[[ -f /etc/bash_completion ]] && . /etc/bash_completion
source ${MY_BASH_DIR}/RcMercury
source ${MY_BASH_DIR}/RcNet
source ${MY_BASH_DIR}/RcVirsh
source ${MY_BASH_DIR}/RcOpenstack
source ${MY_BASH_DIR}/HelpBash
source ${MY_BASH_DIR}/RcSsh
source ${MY_BASH_DIR}/RcKernel
source ${MY_BASH_DIR}/RcAfs

kkalias
